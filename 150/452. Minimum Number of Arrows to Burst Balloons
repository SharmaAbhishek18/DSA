import java.util.*;

class Solution {//T.C -> O(n log n) (due to sorting) S.C->>O(1)
    public int findMinArrowShots(int[][] points) {

        if (points.length == 0) return 0;

        // Sort balloons by their end position
        Arrays.sort(points, Comparator.comparingInt(a -> a[1]));

        // First arrow is placed at the end of the first balloon
        int arrows = 1;
        int lastArrowPos = points[0][1];

        // Traverse the rest of the balloons
        for (int i = 1; i < points.length; i++) {
            // If current balloon starts after the last arrow position, shoot a new arrow
            if (points[i][0] > lastArrowPos) {
                arrows++;
                lastArrowPos = points[i][1]; // update arrow position
            }
            // else, it's already burst by the previous arrow
        }

        return arrows;
    }
}
