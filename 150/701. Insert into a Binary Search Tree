class Solution {//T.C->O(log n) S.C->O(h) h = height of tree  Recursive solution
    public TreeNode insertIntoBST(TreeNode root, int val) {
        // Case 1: Empty spot found → create new node
        if(root == null) return new TreeNode(val);
        // Case 2: Insert into left subtree
        else if(root.val > val){
            root.left = insertIntoBST(root.left,val);
        // Case 3: Insert into right subtree    
        }else {
            root.right = insertIntoBST(root.right,val);
        }
        // Return unchanged root pointer
        return root;
    }
}

ITERATIVE SOLUTION

class Solution { // T.C -> O(log n), S.C -> O(1) Recursive Approach
    public TreeNode insertIntoBST(TreeNode root, int val) {

        // Case 1: Empty tree → create new node
        if(root == null) return new TreeNode(val);

        TreeNode curr = root;
        while(true){
            if(curr.val < val){
                if(curr.right != null) curr = curr.right;
                else {
                    curr.right = new TreeNode(val);
                    break;
                }
            } else {
                if(curr.left != null) curr = curr.left;
                else {
                    curr.left = new TreeNode(val);
                    break;
                }
            }
        }
        return root;
    }
}
