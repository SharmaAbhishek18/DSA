Approach 1 - Using HashMap 
class Solution {//T.C->O(N) S.C->O(N) Valid ascii characters
    public boolean isIsomorphic(String s, String t) {

        HashMap<Character,Character> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++){
            char ss = s.charAt(i);
            char tt = t.charAt(i);

            if((map.containsKey(ss) && map.get(ss) != tt) ||
                (!map.containsKey(ss) && map.values().contains(tt))){
                return false;
            }
        map.put(ss,tt);
        }
        return true;
    }
}

Approach 2 - Using Two Arrays
class Solution {//Time Complexity: O(n) Space Complexity: O(1)
    public boolean isIsomorphic(String s, String t) {

        int [] st = new int[256];
        int [] ts = new int[256];

        // Since all ASCII values are between 0 and 255, -1 safely represents "unmapped
        Arrays.fill(st,-1);
        Arrays.fill(ts,-1);
        for(int  i = 0; i < s.length(); i++){
            char ss = s.charAt(i);
            char tt = t.charAt(i);

            if(st[ss] == -1 && ts[tt] == -1){
                st[ss] = tt;
                ts[tt] = ss;
            }
            else if(st[ss] != tt || ts[tt] != ss){
                return false;
            }
        }
       return true;
    }
}
