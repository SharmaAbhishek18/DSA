class Solution { //T.C -> O(N) && S.C -> O(N)
    public int longestConsecutive(int[] nums) {

        int longestLength = 0;
        Map<Integer,Boolean> map = new HashMap<>();
        //First every number will be not visited so it will be false 
        for(int num : nums){
            map.put(num,Boolean.FALSE);
        }

        for(int num : nums){
            int currentLength = 1;
      
      // Check in forward direction
       int nextNum = num + 1;
       //The number should not be visited in map it should be false
       while(map.containsKey(nextNum) && map.get(nextNum) == false){
           
            currentLength++;
            map.put(nextNum, Boolean.TRUE);

        // Move to the next number
            nextNum++;
        }
           
         //Check in Reverse Direction
        int prevNum = num - 1;    
        while(map.containsKey(prevNum) && !map.get(prevNum)){
            currentLength++;
            map.put(prevNum,Boolean.TRUE);
            // Move to the previous number
            prevNum--;
        }
        longestLength = Math.max(longestLength, currentLength);

    }
    return longestLength;
    }
}
