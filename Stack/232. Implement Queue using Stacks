class MyQueue {//push(): O(1) pop(), peek(), empty(): O(1) 
    Stack<Integer>stack1;
    Stack<Integer>stack2;
    public MyQueue() {
        stack1 = new Stack();
        stack2 = new Stack();
    }
    public void push(int x) {
        stack1.push(x);
    }
    public int pop() {
        peek();
        return stack2.pop();
    }
    public int peek() {
        if(stack2.empty()){
        //if stack2 is empty then just pop() the elements from the stack1->push->stack2
            while(!stack1.empty()){
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }
    //we have to check both the stack are empty because what if only push oper happen then
    //we have to check both stack are empty or not 
    public boolean empty() {
        return stack1.empty() && stack2.empty();
    }
}

Approach 2 T.c->push->o(n) rest o(1)
class MyQueue {//push(): O(n) pop(), peek(), empty(): O(1) 
    Stack<Integer>stack1;
    Stack<Integer>stack2;
    public MyQueue() {
        stack1 = new Stack();
        stack2 = new Stack();
    }
    public void push(int x) {
    //First every element is pushed into the stack and if a new element comes(say after pop)
    //then from stack 2 pop out all the elements->push it into stack 1 and the new element
    //is now pushed into the stack2 directly
        while(!stack2.isEmpty()){
            stack1.push(stack2.pop());
        }
        stack2.push(x);//now pushed into the stack2 directly
    //till stack1 get empty pushed it elements into the stack 2
        while(!stack1.isEmpty()){
            stack2.push(stack1.pop());
        } 
    }
    
    public int pop() {
        return stack2.pop();
    }
    
    public int peek() {
        return stack2.peek();
    }
    
    public boolean empty() {
        return stack2.isEmpty();
    }
}

