class Solution {//T.C->	O(N * K log K) S.C -> O(N * K)
    public List<List<String>> groupAnagrams(String[] strs) {

       Map<String,List<String>> map = new HashMap<>(); 
        for(String word : strs){
            char[] arr = word.toCharArray();
            Arrays.sort(arr);
            String key = new String(arr);
            //If key already exists → just add word to that list 
            // If key does not exist → first create a new list, then add word.
            map.computeIfAbsent(key,k -> new ArrayList<>()).add(word);
        }
        return  new ArrayList<>(map.values());
    }
}


import java.util.*;
class Solution { // T.C -> O(N * K), S.C -> O(N * K)
   public List<List<String>> groupAnagrams(String[] strs) {

        Map<String, List<String>> map = new HashMap<>();

        for(String word : strs){
            int [] freq = new int[26];
           for(char c : word.toCharArray()){
            freq[c - 'a']++;
           } 
        String key =   Arrays.toString(freq);
        map.computeIfAbsent(key,k-> new ArrayList<>()).add(word);
        }
        return new ArrayList<>(map.values());
    }
}

