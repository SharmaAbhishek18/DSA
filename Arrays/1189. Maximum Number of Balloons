class Solution {
    public int maxNumberOfBalloons(String text) {
    Map<Character,Integer> map = new HashMap<>();
        for(char i :text.toCharArray()){
            if(i =='b' || i =='a' || i =='l' || i =='o' || i =='n'){
            map.put(i,map.getOrDefault(i,0)+1);
            }
        }
    int x = Math.min(map.getOrDefault('b',0),Math.min(map.getOrDefault('a',0),map.getOrDefault('n',0)));
    int xx = Math.min(map.getOrDefault('l',0),map.getOrDefault('o',0));
    //To make one ballon we need 1 'b' or 'a' or 'n' AND two 'l' or 'o'
    return Math.min(xx/2,x);
    }
    
    }

APPROACH - 2 T.C-> O(N) AND S.C->O(1)
class Solution {
    public int maxNumberOfBalloons(String text) {
        int[] count = new int[26];
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }

        // balloon â†’ b(1), a(1), l(2), o(2), n(1)
        int min = count['b' - 'a'];
        min = Math.min(min, count['a' - 'a']);
        min = Math.min(min, count['l' - 'a'] / 2);
        min = Math.min(min, count['o' - 'a'] / 2);
        min = Math.min(min, count['n' - 'a']);

        return min;
    }
}
