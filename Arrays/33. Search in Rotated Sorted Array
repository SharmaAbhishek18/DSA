class Solution {
    public int search(int[] nums, int target) {
     Map<Integer,Integer> map = new HashMap<>();
     for(int  i = 0; i < nums.length; i++){
        map.put(nums[i],i);
     }
    return map.getOrDefault(target,-1);
    }
}


APPROACH - 2
class Solution {
    public int search(int[] nums, int target) {
      for(int  i = 0; i < nums.length; i++){
        if(nums[i] == target){
            return i;
        }
      }
      return -1; 
    }
}

class Solution {
    public int search(int[] nums, int target) {
        int start = 0, end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] == target) return mid;

            // Check if left half is sorted
            if (nums[start] <= nums[mid]) {
                if (nums[start] <= target && target < nums[mid]) {
                    end = mid - 1; // Target lies in left half
                } else {
                    start = mid + 1; // Target lies in right half
                }
            } 
            // Otherwise, right half is sorted
            else {
                if (nums[mid] < target && target <= nums[end]) {
                    start = mid + 1; // Target lies in right half
                } else {
                    end = mid - 1; // Target lies in left half
                }
            }
        }
        return -1;
    }
}
