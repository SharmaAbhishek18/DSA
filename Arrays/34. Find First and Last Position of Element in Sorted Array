class Solution {// Time Complexity -> O(log n) // Space Complexity -> O(1)
    public int[] searchRange(int[] nums, int target) {
        // Find first and last occurrence using binary search
        return new int[]{
            findIndex(nums, target, true),   // first occurrence
            findIndex(nums, target, false)   // last occurrence
        };
    }
public int findIndex(int[] nums, int target, boolean findFirst) {
        int start = 0, end = nums.length - 1;
        int ans = -1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                ans = mid; 
                if (findFirst)
                    end = mid - 1;  // go left to find first occurrence
                else
                    start = mid + 1; // go right to find last occurrence
            } 
            else if (nums[mid] > target)
                end = mid - 1;
            else
                start = mid + 1;
        }
        return ans;
    }
}
